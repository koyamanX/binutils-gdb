; SUN32 CPU description.  -*- Scheme -*-
; Copyright 2019 Free Software Foundation, Inc.
;
; Written By Ckoyama <ckoyama.1996@gmail.com>
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

(include "simplify.inc")

(define-arch
	(name sun32)
	(comment "SUN32 Architecture")
	(default-alignment forced)
	(insn-lsb0? #t)
	(machs sun32)
	(isas sun32)
)

(define-isa
	(name sun32)
	(default-insn-bitsize 32)
	(base-insn-bitsize 32)
	(decode-assist (31 30))
	(liw-insns 1)
	(parallel-insns 1)
)

(define-cpu
	(name sun32)
	(comment "SUN32")
	(endian big)
	(word-bitsize 32)
)

(define-mach
	(name sun32)
	(comment "sun32")
	(cpu sun32)
)

(define-model
	(name sun32)
	(comment "sun32")
	(mach sun32)
	(unit u-exec "exec unit" ()
		1 1
		()
		()
		()
		()
	)
)

(dnh
	h-pc
	"PC"
	(PC)
	(pc SI)
	()
	()
	()
)

(dnh
	h-gr
	"General purpose register"
	()
	(register WI (32))
	(keyword "" 
		(
			(r0   0) (r1   1) (r2   2) (r3   3) (r4   4)
			(r5   5) (r6   6) (r7   7) (r8   8) (r9   9)
			(r10 10) (r11 11) (r12 12) (r13 13) (r14 14)
			(r15 15) (r16 16) (r17 17) (r18 18) (r19 19)
			(r20 20) (r21 21) (r22 22) (r23 23) (r24 24)
			(r25 25) (r26 26) (r27 27) (r28 28) (r29 29)
			(r30 30) (r31 31) (sp 30)  (gp  29)
		)
	)
	()
	()
)

(define-pmacro (dwf x-name x-comment x-attrs x-word-offset x-word-length 
					x-start x-length x-mode x-encode x-decode)
	(define-ifield
		(name x-name)
		(comment x-comment)
		(.splice attrs (.unsplice x-attrs))
		(word-offset x-word-offset)
		(word-length x-word-length)
		(start x-start)
		(length x-length)
		(mode x-mode)
		(.splice encode (.unsplice x-encode))
		(.splice decode (.unsplice x-decode))
	)
)

(dwf f-type "TYPE Field" () 0 32 31 2 UINT (#f) (#f))
(dwf f-op   "OP  Field"  () 0 32 29 5 UINT (#f) (#f))
(dwf f-rd   "RD  Field"  () 0 32 24 5 UINT (#f) (#f))
(dwf f-ra   "RA  Field"  () 0 32 19 5 UINT (#f) (#f))
(dwf f-rb   "RB  Field"  () 0 32 14 5 UINT (#f) (#f))
(dwf f-xxx    "X   Field"  () 0 32 9 10 UINT (#f) (#f))

(dnop rd "destination register" () h-gr f-rd)
(dnop ra "source register a" () h-gr f-ra)
(dnop rb "source register b" () h-gr f-rb)

(define-normal-insn-enum insn-type "type enums" () TYPE_ f-type
	(.map .str (.iota 4))
)

(define-normal-insn-enum insn-op "op enums" () OP_ f-op
	(.map .str (.iota 32))
)

(define-normal-insn-enum insn-xxx "x" () XXX_ f-xxx
	("0")
)

(define-pmacro (rtype name mnemonic opcode)
	(begin
		(dni name
			(.str mnemonic " rtype")
			()
			(.str mnemonic " $rd,$ra,$rb")
			(+ TYPE_0 opcode rd ra rb XXX_0)
			()
			()
		)
	)
)


(rtype rtype_add add OP_0)
(rtype rtype_sub sub OP_1)
(rtype rtype_or or OP_2)
(rtype rtype_and and OP_3)
(rtype rtype_xor xor OP_4)


