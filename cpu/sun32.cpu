; SUN32 architecture.  -*- Scheme -*-
; Copyright 2019 Free Software Foundation, Inc.
; Contributed by Chihiro Koyama <ckoyama.1996@gmail.com>
;
; This file is part of the GNU Binutils.
;
; This program is free software; you can redistribute it and/or modify
; it under the terms of the GNU General Public License as published by
; the Free Software Foundation; either version 3 of the License, or
; (at your option) any later version.
;
; This program is distributed in the hope that it will be useful,
; but WITHOUT ANY WARRANTY; without even the implied warranty of
; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
; GNU General Public License for more details.
;
; You should have received a copy of the GNU General Public License
; along with this program; if not, write to the Free Software
; Foundation, Inc., 51 Franklin Street - Fifth Floor, Boston,
; MA 02110-1301, USA.

(include "simplify.inc")

(define-arch
	(name sun32)
	(comment "SUN Architecture")
	(default-alignment aligned)
	(insn-lsb0? #t)
	(machs sun32)
	(isas sun32)
)

(define-isa
	(name sun32)
	(comment "SUN32 instructin set")
	(default-insn-bitsize 32)
	(base-insn-bitsize 32)
	(decode-assist (31 30))
	(liw-insns 1)
	(parallel-insns 1)
;	(setup-semantics (set-quiet (reg h-gr pc) (add pc 4)))
)

(define-cpu
	(name sun32)
	(comment "SUN base family")
	(endian big)
	(word-bitsize 32)
)

(define-mach
	(name sun32)
	(comment "SUN cpu")
	(cpu sun32)
)

(define-model
	(name sun32)
	(comment "sun32")
	(mach sun32)
	(unit u-exec "Execution Unit" ()
		1 1 ;issue done
		()
		()
		()
		()
	)
)

; Hardware
(dnh h-pc "program counter" (PC) (pc SI) () () ())

(dnh h-gr "General Purpose Register"
	()
	(register WI (32))
	(keyword "" 
		(
			(r0 0) (r1 1) (r2 2) (r3 3) (r4 4)
			(r5 5) (r6 6) (r7 7) (r8 8) (r9 9)
			(r10 10) (r11 11) (r12 12) (r13 13) (r14 14)
			(r15 15) (r16 16) (r17 17) (r18 18) (r19 19)
			(r20 20) (r21 21) (r22 22) (r23 23) (r24 24)
			(r25 25) (r26 26) (r27 27) (r28 28) (r29 29)
			(r30 30) (r31 31) (sp 30)  (gp  29)
		)
	)
	()
	()
)

; define-normal-hardware(pmacro)

(dnh h-int15  "15 bit int"  () (immediate (INT  15)) () () ())
(dnh h-uint20 "20 bit uint" () (immediate (UINT 20)) () () ())
(dnh h-uint18 "18 bit uint hi" () (immediate (UINT 18)) () () ())
(dnh h-uint14 "14 bit uint lo" () (immediate (UINT 14)) () () ())
	

; instruction format

(define-pmacro (dwf x-name x-comment x-attrs x-word-offset x-word-length 
					x-start x-length x-mode x-encode x-decode)
	(define-ifield
		(name x-name)
		(comment x-comment)
		(.splice attrs (.unsplice x-attrs))
		(word-offset x-word-offset)
		(word-length x-word-length)
		(start x-start)
		(length x-length)
		(mode x-mode)
		(.splice encode (.unsplice x-encode))
		(.splice decode (.unsplice x-decode))
	)
)
(dwf f-type "TYPE Field" () 0 32 31 2 UINT (#f) (#f))
(dwf f-op   "OP  Field"  () 0 32 29 5 UINT (#f) (#f))
(dwf f-rd   "RD  Field"  () 0 32 24 5 UINT (#f) (#f))
(dwf f-ra   "RA  Field"  () 0 32 19 5 UINT (#f) (#f))
(dwf f-rb   "RB  Field"  () 0 32 14 5 UINT (#f) (#f))
; unused feild which must be filled with zero
(dwf f-x    "X   Field"  () 0 32 9 10 UINT (#f) (#f))
(dwf f-xxxh "xxx for 18hi" () 0 32 1 2 UINT (#f) (#f))
(dwf f-xxxl "xxx for 16lo" () 0 32 15 1 UINT (#f) (#f))
(dwf f-xxxt25 "" () 0 32 24 25 INT (#f) (#f))
(dwf f-xxx20 "" () 0 32 19 20 INT (#f) (#f))

; itype memory
(dwf f-sft  "SFT Field"   () 0 32 13  3 UINT (#f) (#f))
(dwf f-s    "S   Field"   () 0 32 14 1 UINT (#f) (#f))
(dwf f-mems  "IMM Field shifted"   (ABS-ADDR) 0 32 10  11  INT (#f) (#f))
(dwf f-mem  "IMM Field"   (ABS-ADDR) 0 32 13  14  INT (#f) (#f))

; load address for hi and lo
(dwf f-u18   "18 hiField"  (ABS-ADDR) 0 32 19 18 UINT (#f) (#f))
(dwf f-u14    "14 lo  Field"  (ABS-ADDR) 0 32 13 14 UINT (#f) (#f))

; long imm
(dwf f-u20  "long IMM "   () 0 32 19 20 UINT (#f) (#f))

; itype imm
(dwf f-i15  "IMM  INT "   () 0 32 14 15  INT (#f) (#f))

; btype
(dwf f-mode "Addressin"   () 0 32 25 1 UINT (#f) (#f))
(dwf f-cond "condition"   () 0 32 29 4 UINT (#f) (#f)) 
(dwf f-t25p "" () 0 32 24 25 INT (#f) (#f))
(dwf f-t20r "" () 0 32 19 20 INT (#f) (#f))

; define-normal-operand
(dnop rd "destination register" () h-gr f-rd)
(dnop ra "source register a" () h-gr f-ra)
(dnop rb "source register b" () h-gr f-rb)
(dnop u20 "u20 long imm" () h-uint20 f-u20)
(dnop i15 "i15 imm without shift" () h-int15 f-i15)
(dnop m11  "i11 byte aligned memory"  () h-addr  f-mems)
(dnop m14  "i14 byte aligned memory"  () h-addr  f-mem)
; shifted by 2
(dnop t25 "i25 word aligned" () h-iaddr f-t25p)
(dnop t20 "i20 word aligned" () h-iaddr f-t20r)

(define-operand (name hi18)
	(comment "18 bit imm")
	(attrs)
	(type h-uint18)
	(index f-u18) 
	(handlers (parse "hi18"))
)
(define-operand (name lo14)
	(comment "14 bit imm")
	(attrs)
	(type h-uint14)
	(index f-u14) 
	(handlers (parse "lo14"))
)


;NOTE
;define-normal-insn-enum

(define-normal-insn-enum insn-type 
	"insn type enums" 
	() 
	TYPE_ 
	f-type 
	(.map .str (.iota 4))
)

(define-normal-insn-enum insn-op 
	"insn opcode enums" 
	() 
	OP_ 
	f-op 
	(.map .str (.iota 32))
)
(define-normal-insn-enum insn-s 
	"insn s enums" 
	() 
	S_ 
	f-s 
	("0" "1")
)
(define-normal-insn-enum insn-x 
	"insn x enums" 
	() 
	XXX_
	f-x 
	("0")
)
(define-normal-insn-enum insn-mode 
	"insn amode enums" 
	() 
	MODE_ 
	f-mode 
	("0" "1")
)

(define-normal-insn-enum insn-xxxh
	"insn xxxh enums" 
	() 
	XXXH_ 
	f-xxxh 
	("0" "1")
)
(define-normal-insn-enum insn-xxxl
	"insn xxxl enums" 
	() 
	XXXL_ 
	f-xxxl 
	("0" "1")
)
(define-normal-insn-enum insn-cond
	"insn cond enums"
	()
	COND_
	f-cond
	(.map .str (.iota 16))
)
(define-normal-insn-enum insn-xxxt25
	"insn cond enums"
	()
	XXXT25_
	f-xxxt25
	("0")
)
(define-normal-insn-enum insn-xxx20
	"insn cond enums"
	()
	XXX20_
	f-xxx20
	("0")
)
(define-pmacro (rtype name mnemonic opcode)
	(begin
		(dni name
			(.str mnemonic " rtype")
			()
			(.str mnemonic " $rd,$ra,$rb")
			(+ TYPE_0 opcode rd ra rb XXX_0)
			()
			()
		)
	)
)
(define-pmacro (itype-lui name mnemonic opcode)
	(begin
		(dni name
			(.str mnemonic " itype-lui")
			()
			(.str mnemonic " $rd,$u20")
			(+ TYPE_1 opcode rd u20)
			()
			()
		)
	)
)
(define-pmacro (itype name mnemonic opcode)
	(begin
		(dni name
			(.str mnemonic " itype signed imm")
			()
			(.str mnemonic " $rd,$i15($ra)")
			(+ TYPE_1 opcode rd ra i15)
			()
			()
		)
	)
)
(define-pmacro (itype-mem name mnemonic opcode)
	(begin
		(dni name
			(.str mnemonic " itype memory imm not shifted")
			()
			(.str mnemonic " $rd,$m14($ra)")
			(+ TYPE_1 opcode rd ra S_0 m14)
			()
			()
		)
	)
)
(define-pmacro (btype-pc name mnemonic cond)
	(begin
		(dni name
			(.str mnemonic " btype pc-relative")
			()
			(.str mnemonic " $t25")
			(+ TYPE_2 cond MODE_0 t25)
			()
			()
		)
	)
)

(define-pmacro (btype-reg name mnemonic cond)
	(begin
		(dni name
			(.str mnemonic " btype reg-relative")
			()
			(.str mnemonic " $t20($rd)")
			(+ TYPE_2 cond MODE_1 rd t20)
			()
			()
		)
	)
)


; instruction
(dni lda-hi
	("ldh hi 18 bit")
	()
	("ldh $rd,$hi18")
	(+ TYPE_1 OP_31 rd hi18 XXXH_0)
	()
	()
)
(dni lda-lo
	("ldl lo 14 bit")
	()
	("ldl $rd,$ra,$lo14")
	(+ TYPE_1 OP_6 rd ra XXXL_0 lo14)
	()
	()
)
(dni ret
	("ret")
	()
	("ret")
	(+ TYPE_2 COND_11 MODE_0 XXXT25_0)
	()
	()
)
(dni reti
	("reti")
	()
	("reti")
	(+ TYPE_2 COND_12 MODE_0 XXXT25_0)
	()
	()
)



; RTYPE
(rtype add add OP_0)
(rtype sub sub OP_1)
(rtype cmp cmp OP_9)
(rtype sll sll OP_2)
(rtype srl srl OP_3)
(rtype sra sra OP_4)
(rtype xor xor OP_5)
(rtype or  or OP_6)
(rtype and and OP_7)

(rtype mult mult OP_11)
(rtype multu multu OP_10)
(rtype div div OP_8)
(rtype divu divu OP_9)
(rtype rem rem OP_13)
(rtype remu remu OP_12)


; ITYPE 
(itype addi add OP_0)
(itype cmpi cmp OP_1)
(itype slli sll OP_2)
(itype srli srl OP_3)
(itype srai sra OP_4)
(itype xori xor OP_5)
(itype ori or  OP_6)
(itype andi and OP_7)

(itype multi mult OP_11)
(itype multui multu OP_10)
(itype divi div OP_8)
(itype divui divu OP_9)
(itype remi rem OP_13)
(itype remui remu OP_12)

; ITYPE lui
(itype-lui lui lui OP_31)

(itype-mem lw lw OP_24)
(itype-mem lh lh OP_27)
(itype-mem lhu lhu OP_25)
(itype-mem lb lb OP_30)
(itype-mem lbu lbu OP_28)
(itype-mem sw sw OP_16)
(itype-mem sh sh OP_17)
(itype-mem sb sb OP_20)

(btype-pc bnepc   bne  COND_0)
(btype-pc beqpc   beq  COND_1)
(btype-pc bgtpc   bgt  COND_2)
(btype-pc bgepc   bge  COND_3)
(btype-pc bltpc   blt  COND_4)
(btype-pc blepc   ble  COND_5)
(btype-pc bpc     b    COND_6)
(btype-pc bultpc  bult COND_7)
(btype-pc bulepc  bule COND_8)
(btype-pc bugtpc  bugt COND_9)
(btype-pc bugepc  buge COND_10)
(btype-pc callpc  call COND_13)
(btype-pc scall  scall COND_15)

(btype-reg bnereg   bne  COND_0)
(btype-reg beqreg   beq  COND_1)
(btype-reg bgtreg   bgt  COND_2)
(btype-reg bgereg   bge  COND_3)
(btype-reg bltreg   blt  COND_4)
(btype-reg blereg   ble  COND_5)
(btype-reg breg     b    COND_6)
(btype-reg bultreg  bult COND_7)
(btype-reg bulereg  bule COND_8)
(btype-reg bugtreg  bugt COND_9)
(btype-reg bugereg  buge COND_10)
(btype-reg callreg  call COND_13)
